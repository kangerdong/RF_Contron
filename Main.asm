;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;按键PA1
;打包数据鼠标上传标记位
;PA0?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#include	<KSL8M163.INC>
;;=========================================================================
;;=========================================================================
;SRAM 0x40~0x7F
;;=========================================================================
R_RF_DATA_LEN			EQU		0X20
R_RF_RX_RESULT			EQU		0X21
R_RF_TX_RESULT			EQU		0X21
R_CHN_INDEX				EQU		0X23
R_RF_ADDR0				EQU		0X24
R_RF_ADDR1				EQU		0X25
R_RF_ADDR2				EQU		0X26
R_RF_ADDR3				EQU		0X27
R_ERROR_FLAG			EQU		0X28
R_EEP_DAT0				EQU		0X29
R_EEP_BUF				EQU		0X29
R_EEP_DAT1				EQU		0X2A
R_EEP_DAT2				EQU		0X2B
R_EEP_DAT3				EQU		0X2C
R_RF_INT_CNT			EQU		0X2D
R_IIC_ADR				EQU		0X2E
R_IIC_LENTH				EQU		0X2F
R_IIC_DAT0				EQU		0X30
R_IIC_DAT1				EQU		0X31
R_IIC_DAT2				EQU		0X32
R_RF_CODE				EQU		0X33
R_SLEEP_TMR_L			EQU		0X34
R_SLEEP_TMR_H			EQU		0X35
R_MATCH_KEY_CNT_L		EQU		0X36
R_MATCH_KEY_CNT_H		EQU		0X38
R_MATCH_TIMEOUT_CNT_L	EQU		0X39
R_USER_FLAG				EQU		0X40
R_TEMP00				EQU		0X4C
R_TEMP01				EQU		0X4D
R_TEMP02				EQU		0X4E
R_TEMP03				EQU		0X4F

R_T_BASE_CNT			EQU		0X50
R_DDL0					EQU		0X51
R_DDL1					EQU		0X52
R_RF_PID				EQU		0X53
R_REC_RF_TMR			EQU		0X54
R_EEP_ADDR				EQU		0X55
R_MATCH_TIMEOUT_CNT_H	EQU		0X56
R_EEP_LENTH				EQU		0X57
R_USER_FLAG2			EQU		0X58
R_LED_FLASH_CNT			EQU		0X59
RF_RESEND_COUNT			EQU		0X5A
R_RF_CODE_SEND			EQU		0X5B

R_KEY_BUF				EQU		0X5C
R_KEY_STATE				EQU		0X5D
R_KEY_OLD				EQU		0X5E
R_KEY_COMPARE_CNT		EQU		0X5F
R_KEY_BAK				EQU		0X60
R_WORK_MODE				EQU		0X61

R_RF_SEND_BUF_0			EQU		0X62
R_RF_SEND_BUF_1			EQU		0X63
R_RF_SEND_BUF_2			EQU		0X64
R_RF_SEND_BUF_3			EQU		0X65
R_RF_SEND_BUF_4			EQU		0X66
R_RF_SEND_BUF_5			EQU		0X67
R_IIC_X					EQU		0X67
R_IIC_Y					EQU		0X68
R_RF_SEND_BUF_6			EQU		0X68

R_S_TMP					EQU		0X70
R_W_TMP					EQU		0X71

R_RF_SEND_0				EQU		0X72
R_RF_SEND_1				EQU		0X73
R_RF_SEND_2				EQU		0X74
R_RF_SEND_3				EQU		0X75
R_RF_SEND_4				EQU		0X76
R_RF_SEND_5				EQU		0X77
R_RF_SEND_6				EQU		0X78
R_RF_SEND_7				EQU		0X79
R_RF_SEND_8				EQU		0X7A
R_RF_SEND_9				EQU		0X7B
R_RF_SEND_10			EQU		0X7C
R_SEND_DELAY			EQU		0X7D
R_SPI_ADR				EQU		0X7E
R_SPI_DATA				EQU		0X7F

;;####################################################################
;;Parameter
#DEFINE	C_COMMAND_APP		0X11
#DEFINE	C_COMMAND_REQ		0X22
#DEFINE	C_COMMAND_RES		0X33
;;####################################################################
;MACRO
;#DEFINE	F_KEY_ACT				R_USER_FLAG, 0
#DEFINE	F_IIC_ACT				R_USER_FLAG, 0
#DEFINE	F_TMR_8MS				R_USER_FLAG, 1
#DEFINE	F_RF_SEND				R_USER_FLAG, 2
#DEFINE	F_TMR_32MS				R_USER_FLAG, 3
#DEFINE	F_RF_RESEND				R_USER_FLAG, 4
#DEFINE	F_RF_MATCH_SUCCESS		R_USER_FLAG, 5
#DEFINE	F_RF_MATCH				R_USER_FLAG, 6

#DEFINE	F_KEY					R_USER_FLAG2, 0
#DEFINE	F_KEY_REPEAT			R_USER_FLAG2, 1
#DEFINE	F_RF_SEND_ZERO			R_USER_FLAG2, 2
#DEFINE	F_RF_SEND_ZERO_TEMP		R_USER_FLAG2, 3
;;------------------------------------------------
;;####################################################################
;VALUE
;==========================================================================
#DEFINE	C_T_TMR				16
#DEFINE	C_KEY_COMPARE_CNT		3
#DEFINE	C_RF_RESEND_COUNT		32
#DEFINE	C_SLEEP_WHOLE			(1000/32)	
#DEFINE	C_MATCH_KEY_TMR			(3000/8)
#DEFINE	C_MATCH_TIMEOUT_TMR		(10000/8)
#DEFINE	C_SEND_DELAY			4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;PROGRAM START
;;;;;;;;;;;;;;;
ORG		0X00
		LGOTO       RESTART
;;------------------------------------------------
ORG		0X004
		MOVAR		R_W_TMP
		SWAPR 		STATUS, TO_A
		MOVAR		R_S_TMP


		BANKSEL		TMR0
		MOVIA		C_T_TMR			;;restore by TIMER0
		MOVAR		TMR0
		BCR			INTCON, 0
		BCR			INTCON, 1
		BCR			INTCON, 2
		BANKSEL		PORTA

		
		INCR		R_T_BASE_CNT, TO_R	
		MOVR		R_T_BASE_CNT, TO_A											;; Check 8mS
		ANDIA		B'00001111'
		BTRSC		STATUS, Z_B
		BSR			F_TMR_8MS	

		MOVR		R_T_BASE_CNT, TO_A											;; Check 8mS
		ANDIA		B'00111111'
		BTRSC		STATUS, Z_B
		BSR			F_TMR_32MS		
	
;-------------------------------------------------
EXIT_INT:
		SWAPR 		R_S_TMP, TO_A
		MOVAR		STATUS
		SWAPR 		R_W_TMP, TO_R
		SWAPR 		R_W_TMP, TO_A
		RETI
;;********************************************************************
#include	"KSL297L.asm"
;;********************************************************************
RESTART:
		LCALL		IO_CONFIG	
		LCALL		SET_SYSTEMP_FOSC
		LCALL		DIS_COMP
		LCALL		TIMER0_INIT
		LCALL		DELAY_200MS
		LCALL		CHECK_EEPROM
		LCALL		RAM_INIT
		LCALL		EEPROM_LOAD_ROLL
		LCALL		INIT_RF
		LCALL		CHECK_TESTMODE
		BSR			INTCON,GIE
				;LCALL		RF_CARRIER_TEST
;;==========================================================
MAIN_LOOP:
		CLRWDT
		BTSS		F_TMR_8MS
		LJUMP		MAIN_LOOP
		BCR			F_TMR_8MS
					
		LCALL		KEY_SCAN
		LCALL		KEY_COMPARE	
		LCALL		KEY_HANDLE
		LCALL		SEND_CODE
		LCALL		CHECK_LED
			
				;	MOVIA		0X04
				;	XORAR		PORTC,TO_R
		BTSS		F_TMR_32MS
		LJUMP		MAIN_LOOP
		BCR			F_TMR_32MS	
					;MOVIA		0X08
					;XORAR		PORTC,TO_R
		LCALL		SEND_CODE_MATCH
		LCALL		CHECK_SLEEP
		LJUMP		MAIN_LOOP
;============================================================
SEND_CODE:
		BTSC		F_RF_MATCH
		RET
		MOVR		R_SEND_DELAY,TO_A
		BTSC		STATUS,Z
		LJUMP		SEND_CODE_START
		DECRSZ		R_SEND_DELAY,TO_R
		RET
SEND_CODE_START:
		BTSS		F_RF_SEND
		LJUMP		SEND_CODE_LOOP_RESEND
		BCR			F_RF_SEND

		BTSC		F_RF_RESEND
		LCALL		RF_SET_NEXT_CHN	
		
		
		MOVIA		C_RF_RESEND_COUNT
		MOVAR		RF_RESEND_COUNT
		BCR			F_RF_RESEND
			
		LCALL		PACKET_APP
		LCALL		SEND_RF_DATA
		BTSC		F_RF_TX_OK
		LJUMP		SEND_CODE_LOOP_SUCCESS
		LJUMP		SEND_CODE_LOOP_FAIL
SEND_CODE_LOOP_RESEND:
	;	BTSC		F_RF_SEND
	;	RET
		BTSS		F_RF_RESEND
		LJUMP		SEND_CODE_ZERO
		LCALL		RF_SET_NEXT_CHN	
		LCALL		PACKET_RESEND
		LCALL		SEND_RF_DATA
		BTSC		F_RF_TX_OK
		LJUMP		SEND_CODE_LOOP_SUCCESS
		DECRSZ		RF_RESEND_COUNT,TO_R
		LJUMP		SEND_CODE_LOOP_RESEND_FAIL
SEND_CODE_LOOP_SUCCESS:
		MOVIA		C_RF_RESEND_COUNT
		MOVAR		RF_RESEND_COUNT
		BCR			F_RF_RESEND
		MOVIA		C_SEND_DELAY
		MOVAR		R_SEND_DELAY
		RET
SEND_CODE_LOOP_FAIL:
		MOVIA		C_RF_RESEND_COUNT
		MOVAR		RF_RESEND_COUNT
SEND_CODE_LOOP_RESEND_FAIL:
		BSR			F_RF_RESEND
		RET
PACKET_APP:
		INCR		R_RF_PID,TO_R
PACKET_RESEND:
		MOVR		R_RF_PID,TO_A
		MOVAR		R_RF_SEND_0
		MOVIA		C_COMMAND_APP
		MOVAR		R_RF_SEND_1
		MOVR		R_RF_CODE,TO_A
		MOVAR		R_RF_SEND_2	
		RET
SEND_CODE_ZERO:
		BTSS		F_RF_SEND_ZERO
		RET
		BCR			F_RF_SEND_ZERO
		BSR			F_RF_SEND_ZERO_TEMP
		BSR			F_RF_SEND
		CLRR		R_RF_CODE
		RET
;-------------------------------------------------
SEND_CODE_MATCH:
		BTSS		F_RF_MATCH		
		RET
		LCALL		RF_SET0DB_PWR
		LCALL		RF_SET_CMD_CHN
		LCALL		RF_SET_DEFAULT_ADR
		LCALL		PACKET_MATCH_REQ
		LCALL		SEND_RF_DATA

		BTSC		F_RF_TX_OK
		LJUMP		SEND_CODE_MATCH_NEXT
		LCALL		DELAY_2MS
		LCALL		PACKET_MATCH_REQ
		LCALL		SEND_RF_DATA
		BTSC		F_RF_TX_OK
		LJUMP		SEND_CODE_MATCH_NEXT
		LCALL		DELAY_2MS
		LCALL		PACKET_MATCH_REQ
		LCALL		SEND_RF_DATA
		BTSC		F_RF_TX_OK
		LJUMP		SEND_CODE_MATCH_NEXT
		LJUMP		SEND_CODE_MATCH_EXIT
SEND_CODE_MATCH_NEXT:

		LCALL		SET_RX_MODE
		LCALL		DELAY_5MS
		LCALL		REC_RF_DATA
		LCALL		SET_TX_MODE
		BTSS		F_RF_RX_OK
		LJUMP		SEND_CODE_MATCH_EXIT
		MOVR		R_RF_PID,TO_A
		XORAR		R_RF_SEND_0,TO_A
		BTSS		STATUS,Z
		LJUMP		SEND_CODE_MATCH_EXIT		
		MOVIA		C_COMMAND_RES
		XORAR		R_RF_SEND_1,TO_A
		BTSS		STATUS,Z
		LJUMP		SEND_CODE_MATCH_EXIT
		BCR			F_RF_MATCH
		LCALL		SET_RF_ADDR
		LCALL		EEPROM_SAVE_ROLL
		BSR			PORTA,7
		LCALL		DELAY_200MS
		BCR			PORTA,7
		LCALL		DELAY_200MS
		BSR			PORTA,7
		LCALL		DELAY_200MS
		BCR			PORTA,7
		LCALL		DELAY_200MS
		BSR			PORTA,7
		LCALL		DELAY_200MS
		BCR			PORTA,7
SEND_CODE_MATCH_EXIT:
		LCALL		RF_SET8DB_PWR
		LCALL		SET_TX_MODE
		LCALL		RF_SET_ID_ADR
		LCALL		RF_SET_NEXT_CHN
		CLRR		R_MATCH_KEY_CNT_L
		CLRR		R_MATCH_KEY_CNT_H
		RET
SET_RF_ADDR:
		MOVR		R_RF_SEND_2,TO_A
		MOVAR		R_RF_ADDR0
		MOVR		R_RF_SEND_3,TO_A
		MOVAR		R_RF_ADDR1
		MOVR		R_RF_SEND_4,TO_A
		MOVAR		R_RF_ADDR2
		MOVR		R_RF_SEND_5,TO_A
		MOVAR		R_RF_ADDR3
		RET
PACKET_MATCH_REQ:
		MOVR		R_RF_PID,TO_A		
		MOVAR		R_RF_SEND_0
		MOVIA		C_COMMAND_REQ
		MOVAR		R_RF_SEND_1
		CLRR		R_RF_SEND_2
		CLRR		R_RF_SEND_3
		CLRR		R_RF_SEND_4
		CLRR		R_RF_SEND_5
		CLRR		R_RF_SEND_6
		RET
EEPROM_SAVE_ROLL:
		MOVIA		1
		MOVAR		R_EEP_ADDR
		MOVIA		4
		MOVAR		R_EEP_LENTH
		MOVR		R_RF_ADDR0,TO_A
		MOVAR		R_EEP_DAT0
		MOVR		R_RF_ADDR1,TO_A
		MOVAR		R_EEP_DAT1
		MOVR		R_RF_ADDR2,TO_A
		MOVAR		R_EEP_DAT2
		MOVR		R_RF_ADDR3,TO_A
		MOVAR		R_EEP_DAT3
		LCALL		EEPROM_WRITE
		RET
EEPROM_LOAD_ROLL:
		MOVIA		1
		MOVAR		R_EEP_ADDR
		CLRR		R_EEP_DAT0
		CLRR		R_EEP_DAT1
		CLRR		R_EEP_DAT2
		CLRR		R_EEP_DAT3
		MOVIA		4
		MOVAR		R_EEP_LENTH
		LCALL		EEPROM_READ
		MOVR		R_EEP_DAT0,TO_A
		MOVAR		R_RF_ADDR0
		MOVR		R_EEP_DAT1,TO_A
		MOVAR		R_RF_ADDR1
		MOVR		R_EEP_DAT2,TO_A
		MOVAR		R_RF_ADDR2
		MOVR		R_EEP_DAT3,TO_A
		MOVAR		R_RF_ADDR3
		RET
;==================================================
CHECK_SLEEP:
		MOVIA		1
		ADDAR		R_SLEEP_TMR_L,TO_R
		BTSC		STATUS,C
		INCR		R_SLEEP_TMR_H,TO_R
	
		MOVIA		(C_SLEEP_WHOLE%256)
		XORAR		R_SLEEP_TMR_L,TO_A
		BTSS		STATUS ,Z
		RET
		MOVIA		(C_SLEEP_WHOLE/256)
		XORAR		R_SLEEP_TMR_H,TO_A
		BTSS		STATUS ,Z
		RET	
		BCR			PORTC,0
		BANKSEL		WDTCON
		BCR			WDTCON, SWDTEN
		BANKSEL		PORTA
		LCALL		RF_MODULE_SLEEP
		BANKSEL		TRISC
		BCR			TRISC,7
		BANKSEL		PORTC
		BCR			PORTC,7
		BANKSEL		INTCON
		BCR			INTCON,PAIF
		BSR			INTCON,PAIE      
		BCR			INTCON,GIE 
		BANKSEL		MSCKCON
        BCR			MSCKCON, 4 
		BANKSEL		PORTA
CHECK_SLEEP_LOOP:
		MOVR		PORTA,TO_A
		NOP
		NOP
		CLRWDT
		NOP
		NOP
		SLEEP
		NOP
		NOP
		CLRWDT
		LCALL		KEY_SCAN
		MOVR		R_KEY_BUF,TO_A
		BTSC		STATUS,Z
		LJUMP		CHECK_SLEEP_LOOP
		BANKSEL		INTCON
		BCR			INTCON,PAIE 
		BSR			INTCON,GIE 
		BANKSEL		MSCKCON
        BSR			MSCKCON, 4       
		BANKSEL		WDTCON
		BSR			WDTCON, SWDTEN
		BANKSEL		PORTA
		BANKSEL		TRISC
		BSR			TRISC,7
		BANKSEL		PORTA
		LCALL		RF_MODULE_WAKE
CHECK_SLEEP_RESET:
		CLRR		R_SLEEP_TMR_L
		CLRR		R_SLEEP_TMR_H
		RET
		

KEY_SCAN:
		MOVR		PORTA,TO_A
		XORIA		B'11111111'
		ANDIA		B'11011111'
		MOVAR		R_KEY_BUF
		RET
KEY_COMPARE:			
		MOVR		R_KEY_OLD,TO_A
		XORAR		R_KEY_BUF,TO_A
		BTRSS		STATUS, Z_B
		LGOTO		KEY_COMPARE_CHANGE
KEY_COMPARE_NOCHANGE:	
		DECRSZ		R_KEY_COMPARE_CNT,TO_R
		RET			
		MOVR		R_KEY_BUF,TO_A
		MOVAR		R_KEY_STATE		
		LGOTO		KEY_COMPARE_RESET
KEY_COMPARE_CHANGE:
		MOVR		R_KEY_BUF,TO_A
		MOVAR		R_KEY_OLD			
KEY_COMPARE_RESET:
		MOVIA		C_KEY_COMPARE_CNT
		MOVAR		R_KEY_COMPARE_CNT
		RET	
KEY_HANDLE:		
		BTSS		F_RF_SEND_ZERO_TEMP
		BCR			F_RF_SEND
		BCR			F_RF_SEND_ZERO_TEMP
		BCR			F_KEY
		BCR			F_KEY_REPEAT
		
   		MOVR		R_KEY_STATE,TO_A
		XORWI		0X10
		BTSC		STATUS,Z
		LJUMP		KEY_HANDLE_A6
		MOVR		R_KEY_STATE,TO_A
		XORWI		B'00001010'
		BTSC		STATUS,Z
		LJUMP		KEY_HANDLE_MATCH
KEY_HANDLE_NULL:
		BTSS		F_RF_MATCH
		RET
		LCALL		CHECK_SLEEP_RESET
		MOVIA		1
		ADDAR		R_MATCH_TIMEOUT_CNT_L,TO_R
		BTSC		STATUS, C
		INCR		R_MATCH_TIMEOUT_CNT_H,TO_R
		MOVIA		(C_MATCH_TIMEOUT_TMR%256)
		XORAR		R_MATCH_TIMEOUT_CNT_L,TO_A
		BTSS		STATUS ,Z
		RET
		MOVIA		(C_MATCH_TIMEOUT_TMR/256)
		XORAR		R_MATCH_TIMEOUT_CNT_H,TO_A
		BTSS		STATUS ,Z
		RET
		BCR			F_RF_MATCH
		LCALL		SEND_CODE_MATCH_EXIT
		RET
		RET	  
KEY_HANDLE_A7:
KEY_HANDLE_A1:
KEY_HANDLE_A3:
		BTSS		F_KEY_REPEAT
KEY_HANDLE_A5:
KEY_HANDLE_A2:
KEY_HANDLE_A4:
KEY_HANDLE_A6:
		LCALL		KEY_HANDLE_PACKAGE
		BSR			F_KEY
		BTSC		R_KEY_STATE,1
		LJUMP		KEY_HANDLE_A_EXIT
		BTSC		R_KEY_STATE,3
		LJUMP		KEY_HANDLE_A_EXIT
		BCR			F_RF_MATCH
KEY_HANDLE_A_EXIT:
		LCALL		CHECK_SLEEP_RESET
		RET	
KEY_HANDLE_PACKAGE:
		BSR			F_RF_SEND
		BSR			F_RF_SEND_ZERO
		MOVR		R_KEY_STATE,TO_A
		MOVAR		R_RF_CODE
		RET
KEY_HANDLE_MATCH:
		LCALL		CHECK_SLEEP_RESET
		BTSC		F_RF_MATCH
		RET
		MOVIA		1
		ADDAR		R_MATCH_KEY_CNT_L,TO_R
		BTSC		STATUS, C
		INCR		R_MATCH_KEY_CNT_H,TO_R
		MOVIA		(C_MATCH_KEY_TMR%256)
		XORAR		R_MATCH_KEY_CNT_L,TO_A
		BTSS		STATUS ,Z
		RET	
		MOVIA		(C_MATCH_KEY_TMR/256)
		XORAR		R_MATCH_KEY_CNT_H,TO_A
		BTSS		STATUS ,Z
		RET
		BSR			F_RF_MATCH	
		CLRR		R_MATCH_TIMEOUT_CNT_L
		CLRR		R_MATCH_TIMEOUT_CNT_H
		RET
;---------------------------------------------
CHECK_LED:
		BTSC		F_RF_MATCH
		LJUMP		CHECK_LED_ON
		MOVR		R_KEY_STATE,TO_A
		XORWI		B'00001010'
		BTSC		STATUS,Z
		LJUMP		CHECK_LED_MATCH_PRE
		BTSS		F_KEY
		LJUMP		CHECK_LED_OFF
CHECK_LED_ON:
		BSR			PORTC,0		
		RET
CHECK_LED_OFF:
		BCR			PORTC,0		
		RET
CHECK_LED_MATCH_PRE:
		MOVIA		1
		XORAR		PORTC,TO_R
		RET
;========================================================
CHECK_TESTMODE:
		BSR			PORTC,1
		LCALL		DELAY_20US
		BTSS		PORTC,2
		LJUMP		CHECK_TESTMODE_EXIT
		BCR			PORTC,1
		LCALL		DELAY_20US
		BTSC		PORTC,2
		LJUMP		CHECK_TESTMODE_EXIT
		BSR			PORTC,1
		LCALL		DELAY_20US
		BTSS		PORTC,2
		LJUMP		CHECK_TESTMODE_EXIT
		BCR			PORTC,1
		LCALL		DELAY_20US
		BTSC		PORTC,2
		LJUMP		CHECK_TESTMODE_EXIT
		LCALL		RF_CARRIER_TEST
CHECK_TESTMODE_EXIT:
		BANKSEL		TRISC
		BCR 		TRISC,2
		BANKSEL		PORTA
		BCR			PORTC,1
		BCR			PORTC,2
		RET
;;//////////////////////////////////////////////////////////////
;;init
;;//////////////////////////////////////////////////////////////
;; PA0 output for RF shut down control
;; PA1
;; PA2
;; PA3 input for receiving RF data
;; PA4 output for voice control. High pulze will trig voice.
;; PA5 input for Key3
IO_CONFIG:
		BANKSEL		MSCKCON
        BSR			MSCKCON, 4
		BANKSEL    	IOCA
		MOVIA		B'11011111'				;; 0=Wakeup dis, 1=Wakeup en.
		MOVAR		IOCA
		BANKSEL    	TRISA
		MOVIA		B'01111111'				;; 0=Output, 1=Input.
		MOVAR		TRISA
		BCR			TRISC,0
		BANKSEL    	PORTA
		MOVIA		B'01111111'
		MOVAR       PORTA       			;;
	
		BANKSEL    	TRISC
		MOVIA		B'10000100'				;; 0=Output, 1=Input.
		MOVAR		TRISC
		BANKSEL    	PORTC
		MOVIA		B'10100100'
		MOVAR       PORTC       			;;
		RET
;;------------------------------------------------
RAM_INIT:
		CLRR		R_USER_FLAG
		CLRR		R_CHN_INDEX
		CLRR		R_USER_FLAG2
		LCALL		CHECK_SLEEP_RESET
		CLRR		R_KEY_STATE
		CLRR		R_KEY_OLD
		CLRR		R_WORK_MODE
		CLRR		R_KEY_BUF
		CLRR		R_RF_RX_RESULT
		CLRR		R_KEY_BAK
		CLRR		R_RF_CODE
		CLRR		R_RF_SEND_BUF_0
		CLRR		R_RF_SEND_BUF_1
		CLRR		R_RF_SEND_BUF_2
		CLRR		R_RF_SEND_BUF_3
		CLRR		R_RF_SEND_BUF_4
		CLRR		R_RF_SEND_BUF_5
		CLRR		R_RF_SEND_BUF_6
		CLRR		R_MATCH_KEY_CNT_L
		CLRR		R_MATCH_KEY_CNT_H
		MOVIA		C_SEND_DELAY
		MOVAR		R_SEND_DELAY
		MOVIA		1
		MOVAR		R_LED_FLASH_CNT
		RET
DIS_COMP:
		BANKSEL    	CMCON0
		MOVIA		07H
		MOVAR		CMCON0

		BANKSEL		PORTA
		RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;SYSTEMP FOSC SET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SET_SYSTEMP_FOSC:
		BANKSEL		OSCCON		;;SWITCH BANK1
		BSR			OSCCON, 6		;;OSCCON[4:6]=FOSC ;111=16MHZ, 000=32KHZ    ,DEFAULT=101=4MHZ
		BSR			OSCCON, 5		;;100=2MHZ
		BCR			OSCCON, 4
		BANKSEL		PORTA			;;SWITCH BANK0
		RET
;;------------------------------------------------
TIMER0_INIT:
		BANKSEL 	TMR0
		CLRR    	TMR0
		MOVIA		C_T_TMR			;;42US BASE
		MOVAR		TMR0
		BANKSEL		INTCON
		MOVIA		0
		MOVAR		INTCON
		BANKSEL 	OPTION_REG
;		BCR			OPTION_REG,7
;		BCR    		OPTION_REG,T0CS		;0 = INTERNAL INMOVARUCTION CYCLE CLOCK (FOSC/4);
;		BSR			OPTION_REG,PSA		;;PRESCALER ASSIGNED TIMER0
;		BSR			OPTION_REG,PS2		;;PRESCALER RATE 000=1:2
;		BCR			OPTION_REG,PS1
;		BCR			OPTION_REG,PS0
		MOVIA		B'00000001'
		MOVAR		OPTION_REG
		BANKSEL		INTCON
		BCR			INTCON,PEIE       	;1 = Enables all unmasked peripheral interrupts
		BSR			INTCON,T0IE    		;1 = Enables the Timer0 interrupt
		BCR			INTCON,GIE			;1 = Enables all unmasked interrupts
		BANKSEL		WDTCON
		BSR			WDTCON, SWDTEN
		BCR			WDTCON, WDTPS0
		BCR			WDTCON, WDTPS1
		BCR			WDTCON, WDTPS2
		BsR			WDTCON, WDTPS3
		BANKSEL		PORTA
		RET
;================================================================
CHECK_EEPROM:
		MOVIA		0XA5
		MOVAR		R_EEP_BUF
		MOVIA		0X00
		MOVAR		R_EEP_ADDR
		MOVIA		0X01
		MOVAR		R_EEP_LENTH				
		LCALL		EEPROM_WRITE
		MOVIA		0X5A
		MOVAR		R_EEP_BUF
		MOVIA		0XF0
		MOVAR		R_EEP_ADDR
		MOVIA		0X01
		MOVAR		R_EEP_LENTH				
		LCALL		EEPROM_WRITE
		MOVIA		0
		MOVAR		R_EEP_ADDR
		CLRR		R_EEP_DAT0
		MOVIA		1
		MOVAR		R_EEP_LENTH
		LCALL		EEPROM_READ
		MOVR		R_EEP_DAT0,TO_A
		XORWI		0XA5		
		BTSS		STATUS,Z
		LJUMP		CHECK_EEPROM
		MOVIA		0XF0
		MOVAR		R_EEP_ADDR
		CLRR		R_EEP_DAT0
		MOVIA		1
		MOVAR		R_EEP_LENTH
		LCALL		EEPROM_READ
		MOVR		R_EEP_DAT0,TO_A
		XORWI		0X5A	
		BTSS		STATUS,Z
		LJUMP		CHECK_EEPROM
		RET

;;//////////////////////////////////////////////////////////////
;;EEPROM WRITE subroutine
;;//////////////////////////////////////////////////////////////
EEPROM_WRITE:
		CLRR		R_TEMP01														;; Reset index

EEPROM_WRITE_LOOP:
		CLRWDT
		BANKSEL		INTCON															;; Disable GIE
		BCR			INTCON, 7
		BANKSEL     EECON1
		BSR         EECON1, WREN1        											;;EEP WRITE EN
		BSR       	EECON1, WREN2
		BSR         EECON1, WREN3
		BANKSEL		PORTA															;; Calcuate the address used to save data
		MOVIA		R_EEP_BUF
		ADDAR		R_TEMP01, TO_A
		BANKSEL		FSR
		MOVAR		FSR
		BANKSEL		PIR1
		BCR         PIR1,EEIF														;; WRITE EEPROM INTERRUPT FLAG BIT,MUST BE SOFTWARE CLEAR
		BANKSEL		PORTA
		MOVR		R_EEP_ADDR, TO_A												;; Calculate the address in eeprom
		ADDAR		R_TEMP01, TO_A
		BANKSEL		EEADR															;; Switch to EEPROM SFR page
		MOVAR		EEADR

		BANKSEL		PORTA
		MOVR		INDF, TO_A
		BANKSEL     EEDAT
		STR         EEDAT
		BSR         EECON2, WR    													;START WRITE EEPROM
		BTRSC   	EECON2, WR														;TEST WRITE COMPLETE
		LGOTO     	$-1

		BCR         EECON1, WREN1
		BCR         EECON1, WREN2
		BCR         EECON1, WREN3

		BANKSEL		INTCON															;; Enable GIE
		BSR			INTCON, 7

		BANKSEL    	PORTA															;; CHANGE BANK PORTA
		DECRSZ		R_EEP_LENTH, TO_R												;; Check get data complete
		LGOTO		$+2
		LGOTO		EEPROM_WRITE_QUIT
		INCR		R_TEMP01, TO_R
		LCALL		DELAY_1MS
		LGOTO		EEPROM_WRITE_LOOP
EEPROM_WRITE_QUIT:
		RET
;;------------------------------------------------
EEPROM_READ:
		CLRR		R_TEMP01														;; Reset index
EEPROM_READ_LOOP:
		CLRWDT
		BANKSEL		INTCON															;; Disable GIE
		BCR			INTCON, 7

		BANKSEL		PORTA															;; Calcuate the address used to save data
		MOVIA		R_EEP_BUF
		ADDAR		R_TEMP01, TO_A
		MOVAR		FSR

		MOVR		R_EEP_ADDR, TO_A												;; Calculate the address in eeprom
		ADDAR		R_TEMP01, TO_A
		BANKSEL		EEADR															;; Switch to EEPROM SFR page
		MOVAR		EEADR
		BSR			EECON1, RD														;; Set read flag
		LDR			EEDAT, W														;; Read data

		BANKSEL		PORTA															;; Save data
		MOVAR		INDF

		INCR		R_TEMP01, TO_R													;; Ready to read next data

		BANKSEL		INTCON															;; Enable GIE
		BSR			INTCON, 7

		BANKSEL		PORTA
		DECRSZ		R_EEP_LENTH, TO_R													;; Check get data complete
		LGOTO		EEPROM_READ_LOOP
		RET
;;#################################################################
;;DELAY MS
;;#################################################################
DELAY_200MS:
		MOVIA		200
		LGOTO		DELAY_MS_BASE
DELAY_100MS:
		MOVIA		100
		LGOTO		DELAY_MS_BASE
DELAY_60MS:
		MOVIA		60
		LGOTO		DELAY_MS_BASE
DELAY_50MS:
		MOVIA		50
		LGOTO		DELAY_MS_BASE
DELAY_30MS:
		MOVIA		30
		LGOTO		DELAY_MS_BASE
DELAY_10MS:
		MOVIA		2
		LGOTO		DELAY_MS_BASE
DELAY_5MS:
		MOVIA		5
		LGOTO		DELAY_MS_BASE
DELAY_2MS:
		MOVIA		2
		LGOTO		DELAY_MS_BASE
DELAY_MS_BASE:
		MOVAR		R_DDL1
DELAY_MS_LOOP:
		CLRWDT
		LCALL		DELAY_1MS
		DECRSZ		R_DDL1, TO_R
		LGOTO		DELAY_MS_LOOP
		RET
;;#################################################################
;;DELAY US
;;#################################################################
DELAY_1MS:
		MOVIA		200
		LGOTO		DELAY_US_BASE
DELAY_750US:
		MOVIA		150
		LGOTO		DELAY_US_BASE
DELAY_500US:
		MOVIA		95
		LGOTO		DELAY_US_BASE
DELAY_250US:
		MOVIA		50
		LGOTO		DELAY_US_BASE
DELAY_200US:
		MOVIA		40
		LGOTO		DELAY_US_BASE
DELAY_100US:
		MOVIA		20
		LGOTO		DELAY_US_BASE
DELAY_50US:
		MOVIA		10
		LGOTO		DELAY_US_BASE
DELAY_40US:
		MOVIA		8
		LGOTO		DELAY_US_BASE
DELAY_25US:
		MOVIA		5
		LGOTO		DELAY_US_BASE
DELAY_20US:
		MOVIA		2
		LGOTO		DELAY_US_BASE
DELAY_10US:
		MOVIA		1
DELAY_US_BASE:
		MOVAR		R_DDL0
DELAY_XX_US_LOOP:			;20US
		CLRWDT
		LJUMP		$+1
		LJUMP		$+1
		LJUMP		$+1
		LJUMP		$+1
		LJUMP		$+1
		LJUMP		$+1
		LJUMP		$+1
		LJUMP		$+1
		DECRSZ		R_DDL0, TO_R
		LGOTO		DELAY_XX_US_LOOP
		RET
ORG	0750H
#INCLUDE		"RF_TABLE.ASM"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
END